#lang racket

(require rackunit "scanner-core.rkt")

(check-equal?
 (scanner "sample-inputs/Input01.txt")
 '("read"
  "id"
  "newline"
  "read"
  "id"
  "newline"
  "write"
  "left-parens"
  "id"
  "add-op"
  "num"
  "right-parens"
  "mult-op"
  "left-parens"
  "left-parens"
  "id"
  "add-op"
  "num"
  "right-parens"
  "add-op"
  "id"
  "add-op"
  "left-parens"
  "id"
  "mult-op"
  "id"
  "right-parens"
  "right-parens"
  "newline"
  "$$"))

(check-equal?
 (scanner "sample-inputs/Input02.txt")
 '("read"
   "id"
   "newline"
   "read"
   "id"
   "newline"
   "write"
   "left-parens"
   "id"
   "add-op"
   "num"
   "right-parens"
   "mult-op"
   "add-op"
   "left-parens"
   "left-parens"
   "id"
   "add-op"
   "num"
   "right-parens"
   "add-op"
   "id"
   "add-op"
   "left-parens"
   "id"
   "mult-op"
   "id"
   "right-parens"
   "right-parens"
   "newline"
   "$$"))

(check-equal?
 (scanner "sample-inputs/Input03.txt")
 '("read"
  "id"
  "newline"
  "read"
  "id"
  "newline"
  "write"
  "left-parens"
  "id"
  "add-op"
  "num"
  "right-parens"
  "mult-op"
  "left-parens"
  "left-parens"
  "id"
  "add-op"
  "num"
  "right-parens"
  "add-op"
  "id"
  "add-op"
  "left-parens"
  "id"
  "mult-op"
  "id"
  "right-parens"
  "right-parens"
  "right-parens"
  "right-parens"
  "right-parens"
  "right-parens"
  "right-parens"
  "newline"
  "$$"))

(check-equal?
 (scanner "sample-inputs/Input04.txt")
 '("read"
  "id"
  "newline"
  "read"
  "id"
  "newline"
  "id"
  "assign"
  "id"
  "add-op"
  "id"
  "mult-op"
  "id"
  "add-op"
  "num"
  "add-op"
  "id"
  "newline"
  "write"
  "id"
  "newline"
  "$$"))

(check-equal?
 (scanner "sample-inputs/Input05.txt")
 '("read"
  "id"
  "newline"
  "read"
  "id"
  "newline"
  "id"
  "assign"
  "id"
  "add-op"
  "id"
  "add-op"
  "id"
  "add-op"
  "id"
  "mult-op"
  "num"
  "newline"
  "write"
  "id"
  "newline"
  "$$"))

(check-equal? (scanner "sample-inputs/Input06.txt") (void))