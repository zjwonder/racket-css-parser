#lang racket

(require rackunit "scanner-core.rkt")

(check-equal? (alpha-tokenize #\A '(#\b #\C #\. #\space)) (cons "abc" '(#\. #\space)))
(check-equal? (alpha-tokenize #\r '(#\e #\a #\d #\space)) '("read" #\space))
(check-equal? (alpha-tokenize #\R '(#\e #\a #\d #\space)) '("read" #\space))
(check-exn exn:fail:contract? (lambda () (alpha-tokenize #\space '(#\a))))

(check-equal? (num-tokenize #\1 '(#\2 #\. #\space #\1) 1) '(#\space #\1))
(check-equal? (num-tokenize #\. '(#\1 #\+ #\5 #\space) 1) '(#\+ #\5 #\space))
(check-exn exn:fail? (lambda () (num-tokenize #\0 '(#\. #\5 #\d #\space) 1)))
(check-exn exn:fail? (lambda () (num-tokenize #\1 '(#\2 #\C #\. #\space) 1)))

(check-equal?(eof? #\$) #t)
(check-equal?(eof? #\1) #f)
(check-equal?(eof? #\A) #f)
(check-equal?(eof? #\?) #f)
(check-equal?(eof? #\+) #f)
(check-equal?(eof? #\*) #f)
(check-equal?(eof? #\() #f)
(check-equal?(eof? #\)) #f)
(check-equal?(eof? #\:) #f)
(check-equal?(eof? #\=) #f)
(check-equal?(eof? #\newline) #f)
(check-equal?(eof? #\space) #f)


(check-equal?(space? #\space) #t)
(check-equal?(space? #\return) #t)
(check-equal?(space? #\$) #f)
(check-equal?(space? #\1) #f)
(check-equal?(space? #\A) #f)
(check-equal?(space? #\?) #f)
(check-equal?(space? #\+) #f)
(check-equal?(space? #\*) #f)
(check-equal?(space? #\() #f)
(check-equal?(space? #\)) #f)
(check-equal?(space? #\:) #f)
(check-equal?(space? #\=) #f)
(check-equal?(space? #\newline) #f)


(check-equal?(newline? #\newline) #t)
(check-equal?(newline? #\$) #f)
(check-equal?(newline? #\1) #f)
(check-equal?(newline? #\A) #f)
(check-equal?(newline? #\?) #f)
(check-equal?(newline? #\+) #f)
(check-equal?(newline? #\*) #f)
(check-equal?(newline? #\() #f)
(check-equal?(newline? #\)) #f)
(check-equal?(newline? #\:) #f)
(check-equal?(newline? #\=) #f)
(check-equal?(newline? #\space) #f)

(check-equal?(add-op? #\+) #t)
(check-equal?(add-op? #\-) #t)
(check-equal?(add-op? #\$) #f)
(check-equal?(add-op? #\1) #f)
(check-equal?(add-op? #\A) #f)
(check-equal?(add-op? #\?) #f)
(check-equal?(add-op? #\*) #f)
(check-equal?(add-op? #\() #f)
(check-equal?(add-op? #\)) #f)
(check-equal?(add-op? #\:) #f)
(check-equal?(add-op? #\=) #f)
(check-equal?(add-op? #\newline) #f)
(check-equal?(add-op? #\space) #f)

(check-equal?(mult-op? #\*) #t)
(check-equal?(mult-op? #\/) #t)
(check-equal?(mult-op? #\$) #f)
(check-equal?(mult-op? #\1) #f)
(check-equal?(mult-op? #\A) #f)
(check-equal?(mult-op? #\?) #f)
(check-equal?(mult-op? #\+) #f)
(check-equal?(mult-op? #\() #f)
(check-equal?(mult-op? #\)) #f)
(check-equal?(mult-op? #\:) #f)
(check-equal?(mult-op? #\=) #f)
(check-equal?(mult-op? #\newline) #f)
(check-equal?(mult-op? #\space) #f)

(check-equal?(left-parens? #\() #t)
(check-equal?(left-parens? #\$) #f)
(check-equal?(left-parens? #\1) #f)
(check-equal?(left-parens? #\A) #f)
(check-equal?(left-parens? #\?) #f)
(check-equal?(left-parens? #\+) #f)
(check-equal?(left-parens? #\*) #f)
(check-equal?(left-parens? #\)) #f)
(check-equal?(left-parens? #\:) #f)
(check-equal?(left-parens? #\=) #f)
(check-equal?(left-parens? #\newline) #f)
(check-equal?(left-parens? #\space) #f)

(check-equal?(right-parens? #\)) #t)
(check-equal?(right-parens? #\$) #f)
(check-equal?(right-parens? #\1) #f)
(check-equal?(right-parens? #\A) #f)
(check-equal?(right-parens? #\?) #f)
(check-equal?(right-parens? #\+) #f)
(check-equal?(right-parens? #\*) #f)
(check-equal?(right-parens? #\() #f)
(check-equal?(right-parens? #\:) #f)
(check-equal?(right-parens? #\=) #f)
(check-equal?(right-parens? #\newline) #f)
(check-equal?(right-parens? #\space) #f)

(check-equal?(left-assign? #\:) #t)
(check-equal?(left-assign? #\$) #f)
(check-equal?(left-assign? #\1) #f)
(check-equal?(left-assign? #\A) #f)
(check-equal?(left-assign? #\?) #f)
(check-equal?(left-assign? #\+) #f)
(check-equal?(left-assign? #\*) #f)
(check-equal?(left-assign? #\() #f)
(check-equal?(left-assign? #\)) #f)
(check-equal?(left-assign? #\=) #f)
(check-equal?(left-assign? #\newline) #f)
(check-equal?(left-assign? #\space) #f)

(check-equal?(right-assign? #\=) #t)
(check-equal?(right-assign? #\$) #f)
(check-equal?(right-assign? #\1) #f)
(check-equal?(right-assign? #\A) #f)
(check-equal?(right-assign? #\?) #f)
(check-equal?(right-assign? #\+) #f)
(check-equal?(right-assign? #\*) #f)
(check-equal?(right-assign? #\() #f)
(check-equal?(right-assign? #\)) #f)
(check-equal?(right-assign? #\:) #f)
(check-equal?(right-assign? #\newline) #f)
(check-equal?(right-assign? #\space) #f)

(check-equal?(numeric? #\0) #t)
(check-equal?(numeric? #\9) #t)
(check-equal?(numeric? #\.) #t)
(check-equal?(numeric? #\$) #f)
(check-equal?(numeric? #\A) #f)
(check-equal?(numeric? #\?) #f)
(check-equal?(numeric? #\+) #f)
(check-equal?(numeric? #\*) #f)
(check-equal?(numeric? #\() #f)
(check-equal?(numeric? #\)) #f)
(check-equal?(numeric? #\:) #f)
(check-equal?(numeric? #\=) #f)
(check-equal?(numeric? #\newline) #f)
(check-equal?(numeric? #\space) #f)

(check-equal?(alphabetic? #\A) #t)
(check-equal?(alphabetic? #\Z) #t)
(check-equal?(alphabetic? #\.) #f)
(check-equal?(alphabetic? #\$) #f)
(check-equal?(alphabetic? #\1) #f)
(check-equal?(alphabetic? #\?) #f)
(check-equal?(alphabetic? #\+) #f)
(check-equal?(alphabetic? #\*) #f)
(check-equal?(alphabetic? #\() #f)
(check-equal?(alphabetic? #\)) #f)
(check-equal?(alphabetic? #\:) #f)
(check-equal?(alphabetic? #\=) #f)
(check-equal?(alphabetic? #\newline) #f)
(check-equal?(alphabetic? #\space) #f)

(printf "end of test execution")